#include <signal.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>

void catchint(int signo) {
    printf("Caught an interrupt: %d\n", signo);
}

int main() {
    int counter = 0;
    sigset_t set;
    sigfillset( &set );

    // Declare 2 sigaction structures, one to hold the new handler
    // and one to hold the original handler in case we want to go back to it.
    struct sigaction original_act, new_act;

    // assign values to structure members
    new_act.sa_handler = catchint;
    new_act.sa_flags = 0;
    new_act.sa_mask = set;

    // call sigaction function and specify which signal it is for
    // SIGINT is generated by pressing Ctrl-C
    // The default action for SIGINT is to terminate
    sigaction(SIGINT, &new_act, NULL);

    while (1) {
        counter++;
        if (counter == 10) {
            printf("resetting the signal action to ignore\n");
            new_act.sa_handler = SIG_IGN;
            sigaction(SIGINT, &new_act, &original_act);
        }
        else if( counter == 20) {
            printf("resetting the signal action to ?\n");
            sigaction(SIGINT, &original_act, NULL);
        }
        else if( counter == 30) {
            printf("resetting the signal action to the default for SIGINT\n");
            new_act.sa_handler = SIG_DFL;
            sigaction(SIGINT, &new_act, NULL);
        }
        printf("sleeping.\n");
        sleep(1);
    }
    exit(0);
}
